// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';
import * as TestCasesAPI from './test-cases';
import * as Shared from '../shared';
import { PageNumberPage, type PageNumberPageParams } from '../../pagination';

export class TestCases extends APIResource {
  /**
   * ### Description
   *
   * Create a test case for a selected dataset.
   */
  create(
    evaluationDatasetId: string,
    body: TestCaseCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCase> {
    return this._client.post(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases`, {
      body,
      ...options,
    });
  }

  /**
   * ### Description
   *
   * Get the test case by its id.
   */
  retrieve(
    evaluationDatasetId: string,
    testCaseId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCase> {
    return this._client.get(
      `/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`,
      options,
    );
  }

  /**
   * ### Description
   *
   * Update a test case.
   */
  update(
    evaluationDatasetId: string,
    testCaseId: string,
    body: TestCaseUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCase> {
    return this._client.patch(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`, {
      body,
      ...options,
    });
  }

  /**
   * ### Description
   *
   * List all test cases for a selected dataset.
   */
  list(
    evaluationDatasetId: string,
    query?: TestCaseListParams,
    options?: Core.RequestOptions,
  ): Core.PagePromise<TestCasesPageNumberPage, TestCase>;
  list(
    evaluationDatasetId: string,
    options?: Core.RequestOptions,
  ): Core.PagePromise<TestCasesPageNumberPage, TestCase>;
  list(
    evaluationDatasetId: string,
    query: TestCaseListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.PagePromise<TestCasesPageNumberPage, TestCase> {
    if (isRequestOptions(query)) {
      return this.list(evaluationDatasetId, {}, query);
    }
    return this._client.getAPIList(
      `/v4/evaluation-datasets/${evaluationDatasetId}/test-cases`,
      TestCasesPageNumberPage,
      { query, ...options },
    );
  }

  /**
   * ### Description
   *
   * Delete a specified test case -- retaining older version belonging to older
   * dataset versions.
   *
   * ### Details
   *
   * This request shouldn't be used when deleting due to compliance reasons. See Wipe
   * action.
   */
  delete(
    evaluationDatasetId: string,
    testCaseId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseDeleteResponse> {
    return this._client.delete(
      `/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`,
      options,
    );
  }

  /**
   * ### Description
   *
   * Creates a batch of test cases
   *
   * ### Details
   *
   * This API can be used to create multiple test cases so users do not have to the
   * incur the cost of repeated network calls. To use this API, pass in a list of
   * test cases in the request body.
   */
  batch(
    evaluationDatasetId: string,
    body: TestCaseBatchParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseBatchResponse> {
    return this._client.post(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/batch`, {
      body,
      ...options,
    });
  }
}

export class TestCasesPageNumberPage extends PageNumberPage<TestCase> {}

export interface ArtifactSchemaGeneration {
  artifact_ids_filter: Array<string>;

  input: string;

  expected_extra_info?: Shared.StringExtraInfoSchema;

  expected_output?: string;
}

export interface FlexibleTestCaseSchema {
  input: string | Record<string, string | number | Array<Shared.FlexibleChunk> | Array<Shared.ChatMessage>>;

  expected_extra_info?: Shared.StringExtraInfoSchema;

  expected_output?:
    | string
    | Record<string, string | number | Array<Shared.FlexibleChunk> | Array<Shared.ChatMessage>>;
}

export interface FlexibleTestCaseVersion {
  /**
   * The unique identifier of the entity.
   */
  id: string;

  /**
   * The ID of the account that owns the given entity.
   */
  account_id: string;

  /**
   * Boolean to track whether or not the test case is autogenerated
   */
  autogenerated: boolean;

  /**
   * The date and time when the entity was created in ISO format.
   */
  created_at: string;

  /**
   * The user who originally created the entity.
   */
  created_by_user_id: string;

  /**
   * The ID of the associated evaluation dataset.
   */
  evaluation_dataset_id: string;

  test_case_data: FlexibleTestCaseSchema;

  /**
   * The date and time when the entity was archived in ISO format.
   */
  archived_at?: string;

  kind_schema?: 'FLEXIBLE';
}

export interface GenerationTestCaseSchema {
  input: string;

  expected_extra_info?: Shared.StringExtraInfoSchema;

  expected_output?: string;
}

export interface GenerationTestCaseVersion {
  /**
   * The unique identifier of the entity.
   */
  id: string;

  /**
   * The ID of the account that owns the given entity.
   */
  account_id: string;

  /**
   * Boolean to track whether or not the test case is autogenerated
   */
  autogenerated: boolean;

  /**
   * The date and time when the entity was created in ISO format.
   */
  created_at: string;

  /**
   * The user who originally created the entity.
   */
  created_by_user_id: string;

  /**
   * The ID of the associated evaluation dataset.
   */
  evaluation_dataset_id: string;

  test_case_data: ArtifactSchemaGeneration | GenerationTestCaseSchema;

  /**
   * The date and time when the entity was archived in ISO format.
   */
  archived_at?: string;

  kind_schema?: 'GENERATION';
}

export interface PaginatedTestCases {
  /**
   * The current page number.
   */
  current_page: number;

  /**
   * The data returned for the current page.
   */
  items: Array<TestCase>;

  /**
   * The number of items per page.
   */
  items_per_page: number;

  /**
   * The total number of items of the query
   */
  total_item_count: number;
}

export type TestCase = GenerationTestCaseVersion | FlexibleTestCaseVersion;

export interface TestCaseDeleteResponse {
  count: number;

  success: boolean;
}

export type TestCaseBatchResponse = Array<TestCase>;

export interface TestCaseCreateParams {
  test_case_data: ArtifactSchemaGeneration | GenerationTestCaseSchema | FlexibleTestCaseSchema;

  account_id?: string;
}

export type TestCaseUpdateParams =
  | TestCaseUpdateParams.PartialTestCaseVersionRequest
  | TestCaseUpdateParams.RestoreRequest;

export namespace TestCaseUpdateParams {
  export interface PartialTestCaseVersionRequest {
    /**
     * Set to true to restore the entity from the database.
     */
    restore: false;

    account_id?: string;

    test_case_data?: ArtifactSchemaGeneration | GenerationTestCaseSchema | FlexibleTestCaseSchema;
  }

  export interface RestoreRequest {
    /**
     * Set to true to restore the entity from the database.
     */
    restore: true;
  }
}

export interface TestCaseListParams extends PageNumberPageParams {
  include_archived?: boolean;
}

export type TestCaseBatchParams = Array<TestCaseBatchParams.Item>;

export namespace TestCaseBatchParams {
  export interface Item {
    test_case_data:
      | TestCasesAPI.ArtifactSchemaGeneration
      | TestCasesAPI.GenerationTestCaseSchema
      | TestCasesAPI.FlexibleTestCaseSchema;

    account_id?: string;
  }
}

export namespace TestCases {
  export import ArtifactSchemaGeneration = TestCasesAPI.ArtifactSchemaGeneration;
  export import FlexibleTestCaseSchema = TestCasesAPI.FlexibleTestCaseSchema;
  export import FlexibleTestCaseVersion = TestCasesAPI.FlexibleTestCaseVersion;
  export import GenerationTestCaseSchema = TestCasesAPI.GenerationTestCaseSchema;
  export import GenerationTestCaseVersion = TestCasesAPI.GenerationTestCaseVersion;
  export import PaginatedTestCases = TestCasesAPI.PaginatedTestCases;
  export import TestCase = TestCasesAPI.TestCase;
  export import TestCaseDeleteResponse = TestCasesAPI.TestCaseDeleteResponse;
  export import TestCaseBatchResponse = TestCasesAPI.TestCaseBatchResponse;
  export import TestCasesPageNumberPage = TestCasesAPI.TestCasesPageNumberPage;
  export import TestCaseCreateParams = TestCasesAPI.TestCaseCreateParams;
  export import TestCaseUpdateParams = TestCasesAPI.TestCaseUpdateParams;
  export import TestCaseListParams = TestCasesAPI.TestCaseListParams;
  export import TestCaseBatchParams = TestCasesAPI.TestCaseBatchParams;
}
