// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';
import * as TestCasesAPI from './test-cases';
import * as Shared from '../shared';

export class TestCases extends APIResource {
  /**
   * ### Description
   *
   * Create a test case for a selected dataset.
   */
  create(
    evaluationDatasetId: string,
    body: TestCaseCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseVersion> {
    return this._client.post(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases`, {
      body,
      ...options,
    });
  }

  /**
   * ### Description
   *
   * Get the test case by its id.
   */
  retrieve(
    evaluationDatasetId: string,
    testCaseId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseVersion> {
    return this._client.get(
      `/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`,
      options,
    );
  }

  /**
   * ### Description
   *
   * Update a test case.
   */
  update(
    evaluationDatasetId: string,
    testCaseId: string,
    body: TestCaseUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseVersion> {
    return this._client.patch(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`, {
      body,
      ...options,
    });
  }

  /**
   * ### Description
   *
   * List all test cases for a selected dataset.
   */
  list(
    evaluationDatasetId: string,
    query?: TestCaseListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<PaginatedTestCaseVersion>;
  list(evaluationDatasetId: string, options?: Core.RequestOptions): Core.APIPromise<PaginatedTestCaseVersion>;
  list(
    evaluationDatasetId: string,
    query: TestCaseListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<PaginatedTestCaseVersion> {
    if (isRequestOptions(query)) {
      return this.list(evaluationDatasetId, {}, query);
    }
    return this._client.get(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases`, {
      query,
      ...options,
    });
  }

  /**
   * ### Description
   *
   * Delete a specified test case -- retaining older version belonging to older
   * dataset versions.
   *
   * ### Details
   *
   * This request shouldn't be used when deleting due to compliance reasons. See Wipe
   * action.
   */
  delete(
    evaluationDatasetId: string,
    testCaseId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<Shared.DeleteResponse> {
    return this._client.delete(
      `/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/${testCaseId}`,
      options,
    );
  }

  /**
   * ### Description
   *
   * Creates a batch of test cases
   *
   * ### Details
   *
   * This API can be used to create multiple test cases so users do not have to the
   * incur the cost of repeated network calls. To use this API, pass in a list of
   * test cases in the request body.
   */
  batchCreate(
    evaluationDatasetId: string,
    body: TestCaseBatchCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<TestCaseBatchCreateResponse> {
    return this._client.post(`/v4/evaluation-datasets/${evaluationDatasetId}/test-cases/batch`, {
      body,
      ...options,
    });
  }
}

export interface PaginatedTestCaseVersion {
  /**
   * The current page number.
   */
  current_page: number;

  /**
   * The data returned for the current page.
   */
  items: Array<TestCaseVersion>;

  /**
   * The number of items per page.
   */
  items_per_page: number;

  /**
   * The total number of items of the query
   */
  total_item_count: number;
}

export type TestCaseVersion =
  | TestCaseVersion.GenerationTestCaseVersionResponse
  | TestCaseVersion.FlexibleTestCaseVersionResponse;

export namespace TestCaseVersion {
  export interface GenerationTestCaseVersionResponse {
    /**
     * The unique identifier of the entity.
     */
    id: string;

    /**
     * The ID of the account that owns the given entity.
     */
    account_id: string;

    /**
     * Boolean to track whether or not the test case is autogenerated
     */
    autogenerated: boolean;

    /**
     * The date and time when the entity was created in ISO format.
     */
    created_at: string;

    /**
     * The user who originally created the entity.
     */
    created_by_user_id: string;

    /**
     * The ID of the associated evaluation dataset.
     */
    evaluation_dataset_id: string;

    test_case_data:
      | GenerationTestCaseVersionResponse.ArtifactSchemaGeneration
      | GenerationTestCaseVersionResponse.SchemaGenerationBase;

    /**
     * The date and time when the entity was archived in ISO format.
     */
    archived_at?: string;

    schema_type?: 'GENERATION';
  }

  export namespace GenerationTestCaseVersionResponse {
    export interface ArtifactSchemaGeneration {
      artifact_ids_filter: Array<string>;

      input: string;

      expected_extra_info?: ArtifactSchemaGeneration.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace ArtifactSchemaGeneration {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }

    export interface SchemaGenerationBase {
      input: string;

      expected_extra_info?: SchemaGenerationBase.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace SchemaGenerationBase {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }
  }

  export interface FlexibleTestCaseVersionResponse {
    /**
     * The unique identifier of the entity.
     */
    id: string;

    /**
     * The ID of the account that owns the given entity.
     */
    account_id: string;

    /**
     * Boolean to track whether or not the test case is autogenerated
     */
    autogenerated: boolean;

    /**
     * The date and time when the entity was created in ISO format.
     */
    created_at: string;

    /**
     * The user who originally created the entity.
     */
    created_by_user_id: string;

    /**
     * The ID of the associated evaluation dataset.
     */
    evaluation_dataset_id: string;

    test_case_data: FlexibleTestCaseVersionResponse.TestCaseData;

    /**
     * The date and time when the entity was archived in ISO format.
     */
    archived_at?: string;

    schema_type?: 'FLEXIBLE';
  }

  export namespace FlexibleTestCaseVersionResponse {
    export interface TestCaseData {
      input:
        | string
        | Record<
            string,
            | string
            | number
            | Array<TestCaseData.UnionMember2>
            | Array<TestCaseData.UserMessage | TestCaseData.AssistantMessage | TestCaseData.SystemMessage>
          >;

      expected_extra_info?: TestCaseData.ExpectedExtraInfo;

      expected_output?:
        | string
        | Record<
            string,
            | string
            | number
            | Array<TestCaseData.UnionMember2>
            | Array<TestCaseData.UserMessage | TestCaseData.AssistantMessage | TestCaseData.SystemMessage>
          >;
    }

    export namespace TestCaseData {
      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }

      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }

      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }
    }
  }
}

export type TestCaseBatchCreateResponse = Array<TestCaseVersion>;

export interface TestCaseCreateParams {
  test_case_data:
    | TestCaseCreateParams.ArtifactSchemaGeneration
    | TestCaseCreateParams.SchemaGenerationBase
    | TestCaseCreateParams.SchemaFlexible;

  account_id?: string;
}

export namespace TestCaseCreateParams {
  export interface ArtifactSchemaGeneration {
    artifact_ids_filter: Array<string>;

    input: string;

    expected_extra_info?: ArtifactSchemaGeneration.ExpectedExtraInfo;

    expected_output?: string;
  }

  export namespace ArtifactSchemaGeneration {
    export interface ExpectedExtraInfo {
      info: string;

      schema_type?: 'STRING';
    }
  }

  export interface SchemaGenerationBase {
    input: string;

    expected_extra_info?: SchemaGenerationBase.ExpectedExtraInfo;

    expected_output?: string;
  }

  export namespace SchemaGenerationBase {
    export interface ExpectedExtraInfo {
      info: string;

      schema_type?: 'STRING';
    }
  }

  export interface SchemaFlexible {
    input:
      | string
      | Record<
          string,
          | string
          | number
          | Array<SchemaFlexible.UnionMember2>
          | Array<SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage>
        >;

    expected_extra_info?: SchemaFlexible.ExpectedExtraInfo;

    expected_output?:
      | string
      | Record<
          string,
          | string
          | number
          | Array<SchemaFlexible.UnionMember2>
          | Array<SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage>
        >;
  }

  export namespace SchemaFlexible {
    export interface UnionMember2 {
      text: string;

      metadata?: Record<string, unknown>;
    }

    export interface UserMessage {
      content: Array<string>;

      role: 'user';
    }

    export interface AssistantMessage {
      content: Array<string>;

      role: 'assistant';
    }

    export interface SystemMessage {
      content: Array<string>;

      role: 'system';
    }

    export interface ExpectedExtraInfo {
      info: string;

      schema_type?: 'STRING';
    }

    export interface UnionMember2 {
      text: string;

      metadata?: Record<string, unknown>;
    }

    export interface UserMessage {
      content: Array<string>;

      role: 'user';
    }

    export interface AssistantMessage {
      content: Array<string>;

      role: 'assistant';
    }

    export interface SystemMessage {
      content: Array<string>;

      role: 'system';
    }
  }
}

export type TestCaseUpdateParams =
  | TestCaseUpdateParams.PartialTestCaseVersionRequest
  | TestCaseUpdateParams.RestoreRequest;

export namespace TestCaseUpdateParams {
  export interface PartialTestCaseVersionRequest {
    /**
     * Set to true to restore the entity from the database.
     */
    restore: false;

    account_id?: string;

    test_case_data?:
      | TestCaseUpdateParams.PartialTestCaseVersionRequest.ArtifactSchemaGeneration
      | TestCaseUpdateParams.PartialTestCaseVersionRequest.SchemaGenerationBase
      | TestCaseUpdateParams.PartialTestCaseVersionRequest.SchemaFlexible;
  }

  export namespace PartialTestCaseVersionRequest {
    export interface ArtifactSchemaGeneration {
      artifact_ids_filter: Array<string>;

      input: string;

      expected_extra_info?: ArtifactSchemaGeneration.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace ArtifactSchemaGeneration {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }

    export interface SchemaGenerationBase {
      input: string;

      expected_extra_info?: SchemaGenerationBase.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace SchemaGenerationBase {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }

    export interface SchemaFlexible {
      input:
        | string
        | Record<
            string,
            | string
            | number
            | Array<SchemaFlexible.UnionMember2>
            | Array<
                SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage
              >
          >;

      expected_extra_info?: SchemaFlexible.ExpectedExtraInfo;

      expected_output?:
        | string
        | Record<
            string,
            | string
            | number
            | Array<SchemaFlexible.UnionMember2>
            | Array<
                SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage
              >
          >;
    }

    export namespace SchemaFlexible {
      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }

      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }

      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }
    }
  }

  export interface RestoreRequest {
    /**
     * Set to true to restore the entity from the database.
     */
    restore: true;
  }
}

export interface TestCaseListParams {
  account_id?: string | null;

  include_archived?: boolean;

  /**
   * Maximum number of artifacts to be returned by the given endpoint. Defaults to
   * 100 and cannot be greater than 10k.
   */
  limit?: number;

  /**
   * Page number for pagination to be returned by the given endpoint. Starts at page
   * 1
   */
  page?: number;
}

export type TestCaseBatchCreateParams = Array<TestCaseBatchCreateParams.Body>;

export namespace TestCaseBatchCreateParams {
  export interface Body {
    test_case_data: Body.ArtifactSchemaGeneration | Body.SchemaGenerationBase | Body.SchemaFlexible;

    account_id?: string;
  }

  export namespace Body {
    export interface ArtifactSchemaGeneration {
      artifact_ids_filter: Array<string>;

      input: string;

      expected_extra_info?: ArtifactSchemaGeneration.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace ArtifactSchemaGeneration {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }

    export interface SchemaGenerationBase {
      input: string;

      expected_extra_info?: SchemaGenerationBase.ExpectedExtraInfo;

      expected_output?: string;
    }

    export namespace SchemaGenerationBase {
      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }
    }

    export interface SchemaFlexible {
      input:
        | string
        | Record<
            string,
            | string
            | number
            | Array<SchemaFlexible.UnionMember2>
            | Array<
                SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage
              >
          >;

      expected_extra_info?: SchemaFlexible.ExpectedExtraInfo;

      expected_output?:
        | string
        | Record<
            string,
            | string
            | number
            | Array<SchemaFlexible.UnionMember2>
            | Array<
                SchemaFlexible.UserMessage | SchemaFlexible.AssistantMessage | SchemaFlexible.SystemMessage
              >
          >;
    }

    export namespace SchemaFlexible {
      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }

      export interface ExpectedExtraInfo {
        info: string;

        schema_type?: 'STRING';
      }

      export interface UnionMember2 {
        text: string;

        metadata?: Record<string, unknown>;
      }

      export interface UserMessage {
        content: Array<string>;

        role: 'user';
      }

      export interface AssistantMessage {
        content: Array<string>;

        role: 'assistant';
      }

      export interface SystemMessage {
        content: Array<string>;

        role: 'system';
      }
    }
  }
}

export namespace TestCases {
  export import PaginatedTestCaseVersion = TestCasesAPI.PaginatedTestCaseVersion;
  export import TestCaseVersion = TestCasesAPI.TestCaseVersion;
  export import TestCaseBatchCreateResponse = TestCasesAPI.TestCaseBatchCreateResponse;
  export import TestCaseCreateParams = TestCasesAPI.TestCaseCreateParams;
  export import TestCaseUpdateParams = TestCasesAPI.TestCaseUpdateParams;
  export import TestCaseListParams = TestCasesAPI.TestCaseListParams;
  export import TestCaseBatchCreateParams = TestCasesAPI.TestCaseBatchCreateParams;
}
